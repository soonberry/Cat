//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 25 images.
  struct image {
    /// Image `17243c97ceecd8525c01516c572d8772`.
    static let c97ceecd8525c01516c572d8772 = Rswift.ImageResource(bundle: R.hostingBundle, name: "17243c97ceecd8525c01516c572d8772")
    /// Image `Back Chevron`.
    static let backChevron = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back Chevron")
    /// Image `Bitmap`.
    static let bitmap = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bitmap")
    /// Image `Cat On Cloud`.
    static let catOnCloud = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cat On Cloud")
    /// Image `Login_keyboard`.
    static let login_keyboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login_keyboard")
    /// Image `Login`.
    static let login = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login")
    /// Image `Polygon`.
    static let polygon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Polygon")
    /// Image `Star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star")
    /// Image `cata`.
    static let cata = Rswift.ImageResource(bundle: R.hostingBundle, name: "cata")
    /// Image `catas`.
    static let catas = Rswift.ImageResource(bundle: R.hostingBundle, name: "catas")
    /// Image `catb`.
    static let catb = Rswift.ImageResource(bundle: R.hostingBundle, name: "catb")
    /// Image `catc`.
    static let catc = Rswift.ImageResource(bundle: R.hostingBundle, name: "catc")
    /// Image `catd`.
    static let catd = Rswift.ImageResource(bundle: R.hostingBundle, name: "catd")
    /// Image `catgrey`.
    static let catgrey = Rswift.ImageResource(bundle: R.hostingBundle, name: "catgrey")
    /// Image `cats`.
    static let cats = Rswift.ImageResource(bundle: R.hostingBundle, name: "cats")
    /// Image `catwhite`.
    static let catwhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "catwhite")
    /// Image `facebook`.
    static let facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook")
    /// Image `feet`.
    static let feet = Rswift.ImageResource(bundle: R.hostingBundle, name: "feet")
    /// Image `fish`.
    static let fish = Rswift.ImageResource(bundle: R.hostingBundle, name: "fish")
    /// Image `headimage`.
    static let headimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "headimage")
    /// Image `heart`.
    static let heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart")
    /// Image `icon`.
    static let icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon")
    /// Image `loginHead`.
    static let loginHead = Rswift.ImageResource(bundle: R.hostingBundle, name: "loginHead")
    /// Image `twitter`.
    static let twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "twitter")
    /// Image `wechat`.
    static let wechat = Rswift.ImageResource(bundle: R.hostingBundle, name: "wechat")
    
    /// `UIImage(named: "17243c97ceecd8525c01516c572d8772", bundle: ..., traitCollection: ...)`
    static func c97ceecd8525c01516c572d8772(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.c97ceecd8525c01516c572d8772, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Back Chevron", bundle: ..., traitCollection: ...)`
    static func backChevron(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backChevron, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Bitmap", bundle: ..., traitCollection: ...)`
    static func bitmap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bitmap, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cat On Cloud", bundle: ..., traitCollection: ...)`
    static func catOnCloud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catOnCloud, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Login", bundle: ..., traitCollection: ...)`
    static func login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Login_keyboard", bundle: ..., traitCollection: ...)`
    static func login_keyboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_keyboard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Polygon", bundle: ..., traitCollection: ...)`
    static func polygon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.polygon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cata", bundle: ..., traitCollection: ...)`
    static func cata(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cata, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "catas", bundle: ..., traitCollection: ...)`
    static func catas(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catas, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "catb", bundle: ..., traitCollection: ...)`
    static func catb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catb, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "catc", bundle: ..., traitCollection: ...)`
    static func catc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catc, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "catd", bundle: ..., traitCollection: ...)`
    static func catd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catd, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "catgrey", bundle: ..., traitCollection: ...)`
    static func catgrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catgrey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cats", bundle: ..., traitCollection: ...)`
    static func cats(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cats, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "catwhite", bundle: ..., traitCollection: ...)`
    static func catwhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catwhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "facebook", bundle: ..., traitCollection: ...)`
    static func facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "feet", bundle: ..., traitCollection: ...)`
    static func feet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fish", bundle: ..., traitCollection: ...)`
    static func fish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fish, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "headimage", bundle: ..., traitCollection: ...)`
    static func headimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.headimage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon", bundle: ..., traitCollection: ...)`
    static func icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loginHead", bundle: ..., traitCollection: ...)`
    static func loginHead(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginHead, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "twitter", bundle: ..., traitCollection: ...)`
    static func twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.twitter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wechat", bundle: ..., traitCollection: ...)`
    static func wechat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wechat, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `HomeTableViewCell`.
    static let homeTableViewCell: Rswift.ReuseIdentifier<HomeTableViewCell> = Rswift.ReuseIdentifier(identifier: "HomeTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "loginHead") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'loginHead' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Cat On Cloud") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Cat On Cloud' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
